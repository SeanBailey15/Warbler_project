1/4/24: 
--Initialized the codebase from downloaded zip

--Created Git repository before doing any work

--Spent time familiarizing myself with the Model

--Spent time learning about the Flask 'g' object and its purpose:
    *stores common data during a request, only "global" within a context* 
    *doesn't store data BETWEEN requests -> use session or database instead!*

--Learned about the before_request decorator:
    *do_logout probably shouldn't be here(?)*
    *1/9/24: Came to realization that do_logout() is not actually decorated with before_request

--Learned about the os library:
    *provides functions for interacting with the operating system*
    *os.environ is a mapping object that repr the user's environmental variables*
    *behaves like a dictionary, dict operations can be performed*
    *can be modified but ONLY for the current process where it was assigned, not permanent*

TOTAL TIME TODAY: 2.5 HOURS

1/7/24:
--Worked on Fix Logout step:
    *Changed debug intercepts to false during this process
    *Implemented simple logout using the provided do_logout() function
    *Question from 1/4 about do_logout was unfounded... 
    *Upon reading app.py further, realized before_request will only call functions when the requested route explicitly calls one of the functions it contains.
    *1/9/24: Preceding comment can be disregarded, realized do_login() and do_logout() were not part of/paired with the before_request decorator

--Worked on Fix User Profile step:
    *Changed the way "Bio" and "Location" are displayed in detail.html
    *Followed another user, noticed the followed_user card was not displaying their bio correctly
    *Changed the "Bio" in following.html to display correctly
    *Changed div #warbler-hero to include an image from user.header_image_url
        -Had to comment out a portion of styling in styling.css under "User profile"; see comments in that file
        -This change did not affect other users --> FOUND A BUG:
            Had to comment out an API call in /generator/create_csvs.py because it was broken;
            Decided to hardcode the User model default header_image_url into the generator; see comments in /generator/create_csvs.py
        -Regenerated the csv files so it would render a header image for users, then re-seeded

--Fix User Cards step:
    *Already fixed the html for following.html in the previous step
    *Fixed html in followers.html and index.html to display the Bios correctly

TOTAL TIME TODAY: 2 HOURS

1/8/24:
--Profile Edit step:
    *Created form class EditUserForm in forms.py
    *Wrote logic for /users/profile route in app.py:
        -Noticed project instructions didn't mention adding a location field to the form, added this
        -Used multiple conditions to ensure a user is authorized to make the changes and to ensure the user cannot change their username to something that is already taken

TOTAL TIME TODAY: 1.5 HOURS

1/9/24:
--Fix Homepage step:
    *Added to the messages query in the '/' route to filter the query with a loop over all users the current user is following, line 375 in app.py

--Research and understand login strategy step:
    *Coincidentally completed this step on 1/4/24

Part Two, Add Likes:
--Found the html for the thumbs up icon button from home.html:
<form method="POST" action="/users/add_like/{{ msg.id }}" id="messages-form">
    <button class="
    btn 
    btn-sm 
    {{'btn-primary' if msg.id in likes else 'btn-secondary'}}"
    >
    <i class="fa fa-thumbs-up"></i> 
    </button>
</form>

--Trying to incorporate this html into any other applicable situation:
    *Changed the above html to this:
<form method="POST" action="/users/add_like/{{ msg.id }}" id="messages-form">
    <button class="
    btn 
    btn-sm 
    {{'btn-primary' if msg in g.user.likes else 'btn-secondary'}}"
    >
    <i class="fa fa-thumbs-up"></i> 
    </button>
</form>
    *Note that msg.id from the if statement did not achieve the desired result...
    *This if statement is supposed to look for an instance within the list of likes, not an id
    *Furthermore, had to specify g.user.likes instead of likes as in the original html...
    *The original html would have been looking to compare the msg instance to an undefined variable otherwise
    *Implemented like/unlike in a new route in app.py for the home page only, thus far--> line 319
    *Found out about request.referrer! This will make like/unlike easier to implement elsewhere!!!
    *Implemented the feature into show.html also, allowing a user to like messages directly from another users profile page
    *Filled in the html to count likes on the users profile page, which is also a link to a page that displays all the liked messages
    *Added route and template to display user liked messages. Placed the route at line 182 of app.py, in relation to the other routes accessed from the user profile page in the same manner
    *Added conditional to the like button functionality within the html to prevent it being displayed to anonymous users

TOTAL TIME TODAY: 4 HOURS

Part Three, Add Tests:
--